import { type TableData, type TableCell, type TableConfig, DEFAULT_TABLE_CONFIG } from "../types"
import { formatJSON } from "./json-parser"

// @ts-ignore
import { makeBlockFactory } from "@json-table/core/json-to-table"
// @ts-ignore
import { blockToHTML } from "@json-table/core/block-to-html"
// @ts-ignore
import { blockToASCII } from "@json-table/core/block-to-ascii"

// Core type definitions
interface CoreBlock {
  height: number
  width: number
  data: {
    rows: CoreRow[]
    indexes: number[]
  }
}

interface CoreRow {
  cells: CoreCell[]
  columns: number[]
}

interface CoreCell {
  height: number
  width: number
  value: any
  type: string
}

/**
 * Convert JSON data to table - Correct implementation using @json-table/core
 */
export function jsonToTable(data: unknown, config: Partial<TableConfig> = {}): TableData {
  const finalConfig = { ...DEFAULT_TABLE_CONFIG, ...config }

  // Convert configuration to @json-table/core format
  const coreOptions = {
    cornerCellValue: finalConfig.cornerCellValue,
    joinPrimitiveArrayValues: finalConfig.joinArrayValues,
    combineArraysOfObjects: false,
    stabilizeOrderOfPropertiesInArraysOfObjects: true,
    proportionalSizeAdjustmentThreshold: 1,
    collapseIndexes: false,
  }

  // Use @json-table/core correct algorithm
  const makeBlock = makeBlockFactory(coreOptions)
  const block = makeBlock(data as any) as CoreBlock

  return blockToTableData(block, finalConfig)
}

// Core conversion logic handled by @json-table/core

/**
 * Create table matrix and track cell placeholders
 */
function createTableMatrix(block: CoreBlock): {
  matrix: (TableCell | null)[][]
  cellMap: Map<string, TableCell>
} {
  const matrix: (TableCell | null)[][] = Array(block.height)
    .fill(null)
    .map(() => Array(block.width).fill(null))

  const cellMap = new Map<string, TableCell>()
  const placed = new Set<CoreCell>()

  // Iterate through all rows and cells
  for (let rowIndex = 0; rowIndex < block.data.rows.length; rowIndex++) {
    const row = block.data.rows[rowIndex]
    const absoluteRowIndex = block.data.indexes[rowIndex]

    for (let cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
      const cell = row.cells[cellIndex]
      const absoluteColIndex = row.columns[cellIndex]

      // Avoid placing the same cell multiple times
      if (placed.has(cell)) continue
      placed.add(cell)

      // Create TableCell, handle type conversion
      const tableCell: TableCell = {
        type:
          cell.type === "header" || cell.type === "corner" || cell.type === "index"
            ? "header"
            : "data",
        value: String(cell.value),
        rowSpan: cell.height,
        colSpan: cell.width,
      }

      const cellId = `${absoluteRowIndex}-${absoluteColIndex}`
      cellMap.set(cellId, tableCell)

      // Mark placeholders in matrix
      for (let r = absoluteRowIndex; r < absoluteRowIndex + cell.height && r < block.height; r++) {
        for (let c = absoluteColIndex; c < absoluteColIndex + cell.width && c < block.width; c++) {
          if (matrix[r][c] === null) {
            matrix[r][c] =
              r === absoluteRowIndex && c === absoluteColIndex ? tableCell : ("occupied" as any)
          }
        }
      }
    }
  }

  return { matrix, cellMap }
}

/**
 * Convert Block to TableData
 */
function blockToTableData(block: CoreBlock, config: TableConfig): TableData {
  const { matrix } = createTableMatrix(block)

  // Convert matrix to row arrays, filter out placeholders
  const rows: TableCell[][] = matrix.map(
    (row) =>
      row.filter(
        (cell) => cell !== null && typeof cell === "object" && "type" in cell
      ) as TableCell[]
  )

  // Extract headers (actual cells from first row)
  const headers = rows.length > 0 ? rows[0].map((cell) => cell.value) : []

  return {
    headers,
    rows,
    metadata: {
      totalRows: block.height,
      totalColumns: block.width,
      dataType: "nested-structure",
    },
    originalBlock: block, // Save original Block data for correct rendering
  }
}

/**
 * Render HTML table - Correct implementation using @json-table/core
 */
export function renderHTMLTable(data: TableData): string {
  // If original Block data exists, use @json-table/core rendering directly (maintain merged table functionality)
  if (data.originalBlock) {
    const coreHTML = blockToHTML(data.originalBlock)
    // Add basic Tailwind styles to HTML generated by @json-table/core
    return addTailwindStylesToCoreHTML(coreHTML)
  }

  // Otherwise use Tailwind CSS rendering
  return renderHTMLTableWithTailwind(data)
}

/**
 * Add complete style support to HTML generated by @json-table/core
 */
function addTailwindStylesToCoreHTML(html: string): string {
  // Add Tailwind class names to table tags
  let styledHTML = html.replace(
    /<table[^>]*>/g,
    `<table class="w-full border-separate border-spacing-0 border-2 border-orange-500/40 rounded-2xl overflow-hidden shadow-2xl shadow-black/30 bg-gradient-to-br from-slate-900/95 to-slate-800/90 backdrop-blur-xl">`
  )

  // Add styles to th tags
  styledHTML = styledHTML.replace(
    /<th([^>]*)>/g,
    `<th$1 class="bg-gradient-to-r from-orange-500/30 via-red-500/25 to-pink-500/30 text-white font-bold text-sm uppercase tracking-wider px-6 py-4 text-center border-b-2 border-orange-500/40 border-r border-orange-500/20 sticky top-0 z-10">`
  )

  // Add styles to td tags
  styledHTML = styledHTML.replace(
    /<td([^>]*)>/g,
    `<td$1 class="px-6 py-4 text-white/90 text-sm border-b border-orange-500/10 border-r border-orange-500/8 transition-all duration-300">`
  )

  // Add styles and alternating background colors to tr tags
  let rowIndex = 0
  styledHTML = styledHTML.replace(/<tr([^>]*)>/g, (match, attrs) => {
    const isEven = rowIndex % 2 === 0
    const bgClass = isEven
      ? "bg-gradient-to-r from-orange-500/5 via-red-500/3 to-pink-500/5"
      : "bg-gradient-to-r from-white/3 via-orange-500/2 to-white/3"

    rowIndex++
    return `<tr${attrs} class="${bgClass} hover:bg-gradient-to-r hover:from-orange-500/15 hover:via-red-500/10 hover:to-pink-500/12 hover:transform hover:-translate-y-0.5 hover:shadow-lg hover:shadow-orange-500/20 cursor-pointer transition-all duration-300 border-b border-orange-500/8">`
  })

  // Wrap as complete HTML document
  return createCompleteHTMLDocument(styledHTML)
}

/**
 * Create complete HTML document with all necessary styles
 */
function createCompleteHTMLDocument(tableHTML: string): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Table</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom CSS styles */
        body {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
            min-height: 100vh;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }
        
        /* Scrollbar styles */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(51, 65, 85, 0.3);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(249, 115, 22, 0.6);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(249, 115, 22, 0.8);
        }
        
        /* Table container styles */
        .table-container {
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(249, 115, 22, 0.2);
            border-radius: 24px;
            padding: 2rem;
            margin: 2rem;
            box-shadow: 
                0 25px 50px -12px rgba(0, 0, 0, 0.5),
                0 0 0 1px rgba(249, 115, 22, 0.1);
        }
        
        /* Title styles */
        .table-title {
            background: linear-gradient(135deg, #f97316, #ef4444, #ec4899);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 2.5rem;
            font-weight: bold;
            text-align: center;
            margin-bottom: 2rem;
        }
        
        /* Table responsive */
        .table-wrapper {
            overflow-x: auto;
            border-radius: 16px;
        }
        
        /* Animation effects */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .table-container {
            animation: fadeIn 0.6s ease-out;
        }
        
        /* Enhanced table hover effects */
        table tr:hover {
            transform: translateY(-2px) !important;
            box-shadow: 0 8px 25px rgba(249, 115, 22, 0.15) !important;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .table-container {
                margin: 1rem;
                padding: 1rem;
            }
            
            .table-title {
                font-size: 1.875rem;
            }
            
            table {
                font-size: 0.75rem;
            }
            
            td, th {
                padding: 0.5rem !important;
            }
        }
    </style>
</head>
<body>
    <div class="table-container">
        <h1 class="table-title">Generated Table</h1>
        <div class="table-wrapper">
            ${tableHTML}
        </div>
        
        <!-- Table information and website promotion -->
        <div class="mt-8 space-y-4 text-center">
            <div class="inline-flex items-center gap-4 rounded-2xl border border-orange-500/20 bg-orange-500/10 px-6 py-3 backdrop-blur-sm">
                <span class="text-orange-300">📊 Generated by JSON to Table Converter</span>
            </div>
            
            <!-- Website promotion information -->
            <div class="rounded-2xl border border-blue-500/20 bg-gradient-to-r from-blue-500/5 to-purple-500/5 p-6 backdrop-blur-sm">
                <div class="space-y-3">
                    <h3 class="bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-xl font-bold text-transparent">
                        🚀 Powered by GeeksKai
                    </h3>
                    <p class="text-slate-300">
                        Discover more amazing developer tools and resources at 
                        <a href="https://geekskai.com" target="_blank" rel="noopener noreferrer" 
                           class="font-semibold text-blue-400 hover:text-blue-300 transition-colors duration-300 underline decoration-blue-500/50 hover:decoration-blue-400">
                            geekskai.com
                        </a>
                    </p>
                    <div class="flex flex-wrap justify-center gap-3 text-sm">
                        <span class="rounded-full border border-emerald-500/30 bg-emerald-500/10 px-3 py-1 text-emerald-300">
                            ✨ Free Developer Tools
                        </span>
                        <span class="rounded-full border border-purple-500/30 bg-purple-500/10 px-3 py-1 text-purple-300">
                            🛠️ Code Utilities
                        </span>
                        <span class="rounded-full border border-orange-500/30 bg-orange-500/10 px-3 py-1 text-orange-300">
                            📚 Tech Resources
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Add interactive effects
        document.addEventListener('DOMContentLoaded', function() {
            // Table row click effects
            const rows = document.querySelectorAll('tr');
            rows.forEach(row => {
                row.addEventListener('click', function() {
                    // Remove highlight from other rows
                    rows.forEach(r => r.classList.remove('ring-2', 'ring-orange-500/50'));
                    // Add highlight to current row
                    this.classList.add('ring-2', 'ring-orange-500/50');
                });
            });
            
            // Add keyboard navigation
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    rows.forEach(r => r.classList.remove('ring-2', 'ring-orange-500/50'));
                }
            });
        });
    </script>
</body>
</html>`
}

/**
 * Render modern table using Tailwind CSS
 */
function renderHTMLTableWithTailwind(data: TableData): string {
  const { rows, metadata } = data

  if (!rows || rows.length === 0) {
    return '<div class="text-center text-slate-400 py-8">No data to display</div>'
  }

  // Build table HTML
  const tableClasses = [
    "w-full",
    "border-separate",
    "border-spacing-0",
    "border-2",
    "border-orange-500/40",
    "rounded-2xl",
    "overflow-hidden",
    "shadow-2xl",
    "shadow-black/30",
    "bg-gradient-to-br",
    "from-slate-900/95",
    "to-slate-800/90",
    "backdrop-blur-xl",
  ].join(" ")

  const headerClasses = [
    "bg-gradient-to-r",
    "from-orange-500/30",
    "via-red-500/25",
    "to-pink-500/30",
    "text-white",
    "font-bold",
    "text-sm",
    "uppercase",
    "tracking-wider",
    "px-6",
    "py-4",
    "text-center",
    "border-b-2",
    "border-orange-500/40",
    "border-r",
    "border-orange-500/20",
    "sticky",
    "top-0",
    "z-10",
  ].join(" ")

  const cellClasses = [
    "px-6",
    "py-4",
    "text-white/90",
    "text-sm",
    "border-b",
    "border-orange-500/10",
    "border-r",
    "border-orange-500/8",
    "transition-all",
    "duration-300",
  ].join(" ")

  const rowEvenClasses = [
    "bg-gradient-to-r",
    "from-orange-500/5",
    "via-red-500/3",
    "to-pink-500/5",
  ].join(" ")

  const rowOddClasses = ["bg-gradient-to-r", "from-white/3", "via-orange-500/2", "to-white/3"].join(
    " "
  )

  const rowHoverClasses = [
    "hover:bg-gradient-to-r",
    "hover:from-orange-500/15",
    "hover:via-red-500/10",
    "hover:to-pink-500/12",
    "hover:transform",
    "hover:-translate-y-0.5",
    "hover:shadow-lg",
    "hover:shadow-orange-500/20",
    "cursor-pointer",
  ].join(" ")

  // Generate table headers
  const headers = rows[0]?.map((cell) => cell.value) || []
  const headerRow = headers
    .map(
      (header, index) =>
        `<th class="${headerClasses} ${index === headers.length - 1 ? "border-r-0" : ""}">${header}</th>`
    )
    .join("")

  // Generate data rows
  const dataRows = rows
    .slice(1)
    .map((row, rowIndex) => {
      const isEven = rowIndex % 2 === 0
      const rowBgClass = isEven ? rowEvenClasses : rowOddClasses

      const cells = row
        .map((cell, cellIndex) => {
          const isLastCell = cellIndex === row.length - 1
          const cellClass = `${cellClasses} ${isLastCell ? "border-r-0" : ""}`
          return `<td class="${cellClass}">${cell.value || ""}</td>`
        })
        .join("")

      return `<tr class="${rowBgClass} ${rowHoverClasses} border-b border-orange-500/8">${cells}</tr>`
    })
    .join("")

  const tableHTML = `
    <table class="${tableClasses}">
      <thead>
        <tr>${headerRow}</tr>
      </thead>
      <tbody>
        ${dataRows}
      </tbody>
    </table>
  `

  return createCompleteHTMLDocument(tableHTML)
}

/**
 * Render ASCII table - Correct implementation using @json-table/core
 */
export function renderASCIITable(data: TableData): string {
  let asciiContent = ""

  // If original Block data exists, use @json-table/core rendering directly
  if (data.originalBlock) {
    asciiContent = blockToASCII(data.originalBlock)
  } else {
    // Otherwise use simplified ASCII rendering
    const { rows } = data
    const lines: string[] = []

    for (const row of rows) {
      const line = row.map((cell) => cell.value || "").join(" | ")
      lines.push(`| ${line} |`)
    }

    asciiContent = lines.join("\n")
  }

  // Add website promotion information
  const promotionText = `

═══════════════════════════════════════════════════════════════
📊 Generated by JSON to Table Converter
🚀 Powered by GeeksKai - https://geekskai.com

Discover more amazing developer tools:
✨ Free Developer Tools  🛠️ Code Utilities  📚 Tech Resources

Visit geekskai.com for more awesome tools and resources!
═══════════════════════════════════════════════════════════════`

  return asciiContent + promotionText
}

/**
 * Render JSON format
 */
export function renderJSON(data: TableData): string {
  // Create complete JSON object with promotion information
  const jsonWithPromotion = {
    ...data,
    _generatedBy: {
      tool: "JSON to Table Converter",
      website: "https://geekskai.com",
      description: "Powered by GeeksKai - Discover more amazing developer tools",
      features: ["✨ Free Developer Tools", "🛠️ Code Utilities", "📚 Tech Resources"],
      message: "Visit geekskai.com for more awesome tools and resources!",
    },
  }

  return formatJSON(jsonWithPromotion, 2)
}
