---
globs: *.tsx,*.ts,*.jsx,*.js
description: UI/UX optimization workflow and interactive design guidelines
---

# 🚀 UI/UX 优化工作流程 - Optimization Workflow

## 🎯 设计优化流程 (Design Optimization Process)

### 📊 问题分析阶段 (Problem Analysis)

1. **视觉审计**:

   - ❌ 识别单调的色彩方案
   - ❌ 发现缺乏层次的布局
   - ❌ 找出交互反馈不足的元素
   - ❌ 检查响应式设计问题

2. **用户体验评估**:
   - 🎯 交互路径是否清晰
   - 🎯 视觉引导是否有效
   - 🎯 错误处理是否友好
   - 🎯 加载状态是否明确

### 🎨 重设计策略 (Redesign Strategy)

#### 🌈 色彩系统升级

```tsx
// 从单一色彩升级到主题色彩系统
// BEFORE: 统一的蓝色主题
<div className="bg-blue-500/10 border-blue-500/20">

// AFTER: 动态主题色彩系统
<div className={`${
  theme === "zip" ? "bg-blue-500/10 border-blue-500/30" :
  theme === "city" ? "bg-emerald-500/10 border-emerald-500/30" :
  "bg-purple-500/10 border-purple-500/30"
}`}>
```

#### ✨ 交互动画增强

```tsx
// 基础静态设计 → 动态交互设计
// BEFORE: 静态卡片
<div className="p-4 border rounded-lg">

// AFTER: 动态交互卡片
<div className="group relative overflow-hidden rounded-2xl border-2 p-6 transition-all duration-500 hover:shadow-2xl hover:shadow-[color]/25">
  <div className="absolute inset-0 bg-gradient-to-br from-[color]/5 opacity-0 transition-opacity duration-500 group-hover:opacity-100"></div>
  <div className="relative">
    {/* 内容 */}
  </div>
</div>
```

## 🧩 模块化优化方法 (Modular Optimization)

### 📦 容器级别优化

```tsx
// 1. 主容器背景升级
const containerOptimization = {
  // 原设计
  basic: "bg-white/10 border border-white/10",

  // 优化设计
  enhanced: `
    relative overflow-hidden rounded-3xl 
    border border-white/10 
    bg-gradient-to-br from-blue-900/25 via-purple-900/20 to-indigo-900/25 
    p-8 shadow-2xl backdrop-blur-xl
  `,
}

// 2. 装饰性背景元素
const backgroundElements = (
  <>
    <div className="absolute -right-16 -top-16 h-36 w-36 rounded-full bg-gradient-to-br from-blue-500/15 to-purple-500/15 blur-3xl" />
    <div className="absolute -bottom-16 -left-16 h-32 w-32 rounded-full bg-gradient-to-br from-purple-500/15 to-pink-500/15 blur-3xl" />
    <div className="absolute right-1/4 top-1/3 h-20 w-20 rounded-full bg-gradient-to-br from-cyan-500/10 to-blue-500/10 blur-2xl" />
  </>
)
```

### 🎭 组件级别优化

```tsx
// 徽章组件优化模板
const OptimizedBadge = ({ icon, title, theme }) => (
  <div
    className={`inline-flex items-center gap-3 rounded-full border border-${theme}-500/30 bg-gradient-to-r from-${theme}-500/10 to-${theme}-500/10 px-6 py-3 backdrop-blur-sm`}
  >
    <span className="text-2xl">{icon}</span>
    <h2
      className={`bg-gradient-to-r from-${theme}-300 via-${theme}-300 to-${theme}-300 bg-clip-text text-2xl font-bold text-transparent`}
    >
      {title}
    </h2>
  </div>
)

// 选择器组件优化
const OptimizedSelector = ({ options, selected, onChange }) => (
  <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
    {options.map(({ type, icon, label, color }) => (
      <label
        key={type}
        className={`
        group relative cursor-pointer overflow-hidden rounded-2xl border-2 p-6 
        transition-all duration-500
        ${
          selected === type
            ? `border-${color}-500/50 bg-gradient-to-br from-${color}-500/20 to-${color}-500/15 shadow-xl shadow-${color}-500/25`
            : `to-white/2 border-white/20 bg-gradient-to-br from-white/5 hover:border-white/40`
        }
      `}
      >
        {/* 选择指示器 */}
        {selected === type && (
          <div className="mt-3 flex items-center gap-2 rounded-full bg-white/10 px-3 py-1 backdrop-blur-sm">
            <div
              className={`h-2 w-2 rounded-full bg-gradient-to-r from-${color}-400 to-${color}-500`}
            />
            <span className="text-xs font-medium text-white">Selected</span>
          </div>
        )}
      </label>
    ))}
  </div>
)
```

## 🎪 高级效果实现 (Advanced Effects Implementation)

### 🌟 多层渐变系统

```tsx
// 渐变层级定义
const gradientLevels = {
  // 第一层：主背景
  background: "bg-gradient-to-br from-blue-900/25 via-purple-900/20 to-indigo-900/25",

  // 第二层：装饰元素
  decoration: "bg-gradient-to-br from-blue-500/15 to-purple-500/15",

  // 第三层：交互元素
  interactive: "bg-gradient-to-br from-blue-500/10 to-cyan-500/5",

  // 第四层：悬停状态
  hover: "hover:from-blue-500/15 hover:to-cyan-500/10"
}

// 使用示例
<div className={`${gradientLevels.background} relative`}>
  <div className={`${gradientLevels.decoration} absolute blur-3xl`} />
  <div className={`${gradientLevels.interactive} ${gradientLevels.hover} transition-all duration-500`}>
    {/* 内容 */}
  </div>
</div>
```

### ⚡ 动画时序系统

```tsx
// 动画时序标准
const animationTimings = {
  instant: "duration-75", // 即时反馈 (按钮点击)
  fast: "duration-150", // 快速交互 (悬停)
  normal: "duration-300", // 标准交互 (状态变化)
  slow: "duration-500", // 复杂动画 (布局变化)
  dramatic: "duration-700", // 戏剧效果 (光线扫过)
  cinematic: "duration-1000", // 电影效果 (页面加载)
}

// 交互状态管理
const InteractiveElement = () => (
  <div
    className={`
    ${animationTimings.normal} 
    transform transition-all 
    hover:scale-105 
    focus:ring-4
    focus:ring-blue-500/20 active:scale-95
  `}
  >
    {/* 内容 */}
  </div>
)
```

### 🎨 色彩动态系统

```tsx
// 智能色彩匹配
const getThemeColors = (type: "zip" | "city" | "coords") => {
  const colorMap = {
    zip: {
      primary: "blue-500",
      secondary: "cyan-500",
      gradient: "from-blue-500/15 to-cyan-500/10",
      shadow: "shadow-blue-500/25",
      glow: "ring-blue-500/20",
    },
    city: {
      primary: "emerald-500",
      secondary: "teal-500",
      gradient: "from-emerald-500/15 to-teal-500/10",
      shadow: "shadow-emerald-500/25",
      glow: "ring-emerald-500/20",
    },
    coords: {
      primary: "purple-500",
      secondary: "pink-500",
      gradient: "from-purple-500/15 to-pink-500/10",
      shadow: "shadow-purple-500/25",
      glow: "ring-purple-500/20",
    },
  }
  return colorMap[type]
}

// 动态样式生成
const DynamicComponent = ({ type }) => {
  const colors = getThemeColors(type)
  return (
    <div
      className={`
      border-${colors.primary}/30 
      bg-gradient-to-br ${colors.gradient}
      hover:${colors.shadow}
      focus:${colors.glow}
    `}
    >
      {/* 内容 */}
    </div>
  )
}
```

## 🔧 工具与工作流 (Tools & Workflow)

### 🎯 开发工具链

```json
// package.json - 推荐依赖
{
  "devDependencies": {
    "tailwindcss": "^3.4.0",
    "prettier": "^3.0.0",
    "prettier-plugin-tailwindcss": "^0.5.0",
    "@tailwindcss/forms": "^0.5.0",
    "@headlessui/react": "^1.7.0",
    "framer-motion": "^10.0.0"
  }
}
```

### ⚡ 代码优化流程

```bash
# 1. 格式化代码
npx prettier --write "**/*.{tsx,ts,jsx,js}"

# 2. 检查 Linting
npx eslint . --fix

# 3. 类型检查
npx tsc --noEmit

# 4. 构建优化
npm run build -- --analyze
```

### 📊 性能监控

```tsx
// 性能监控 Hook
const usePerformanceMonitor = () => {
  useEffect(() => {
    // 监控渲染时间
    const observer = new PerformanceObserver((list) => {
      list.getEntries().forEach((entry) => {
        console.log(`${entry.name}: ${entry.duration}ms`)
      })
    })
    observer.observe({ entryTypes: ["measure"] })

    return () => observer.disconnect()
  }, [])
}

// 组件性能优化
const OptimizedComponent = React.memo(({ data }) => {
  const memoizedData = useMemo(() => processData(data), [data])

  const handleAction = useCallback(() => {
    // 处理逻辑
  }, [])

  return <div>{/* 渲染内容 */}</div>
})
```

## 📱 响应式优化策略 (Responsive Optimization)

### 🎛️ 断点优化

```tsx
// 响应式组件模板
const ResponsiveLayout = () => (
  <div
    className="
    // Mobile First
    // Tablet
    // Desktop //
    
    Large Desktop
    // Extra
    Large
    
    flex flex-col
    gap-4 px-4
    py-6
    
    sm:gap-6 sm:px-6 sm:py-8
    md:grid
    md:grid-cols-2 md:gap-8
    
    lg:grid-cols-3 lg:px-8 lg:py-12
    xl:mx-auto xl:max-w-7xl
  "
  >
    {/* 内容 */}
  </div>
)
```

### 📐 适配性设计

```tsx
// 智能适配组件
const AdaptiveComponent = () => {
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 768)
    checkMobile()
    window.addEventListener("resize", checkMobile)
    return () => window.removeEventListener("resize", checkMobile)
  }, [])

  return (
    <div className={isMobile ? "flex flex-col gap-4 p-4" : "grid grid-cols-3 gap-8 p-8"}>
      {/* 内容 */}
    </div>
  )
}
```

这套优化工作流程确保每个UI组件都能经过系统性的设计升级，达到顶级产品标准。
